using Rhino;
using Rhino.Geometry;
using Rhino.DocObjects;
using Rhino.Collections;

using GH_IO;
using GH_IO.Serialization;
using Grasshopper;
using Grasshopper.Kernel;
using Grasshopper.Kernel.Data;
using Grasshopper.Kernel.Types;

using System;
using System.IO;
using System.Linq;
using System.Drawing;
using System.Reflection;
using System.Collections;
using System.Windows.Forms;
using System.Collections.Generic;
using System.Runtime.InteropServices;
namespace Vipers
{
    public class PolygonF系列 : GH_Component
    {
        /// <summary>
        /// Initializes a new instance of the PolygonF系列 class.
        /// </summary>
        public PolygonF系列()
            : base("Rhombic Polyhedron", "PolygonF",
                "Create rhombic polyhedron (RMB to change shape)",
                "Vipers", "Viper.surface")
        {
        }
        public override GH_Exposure Exposure
        {
            get { return GH_Exposure.quinary; }
        }
        /// <summary>
        /// Registers all the input parameters for this component.
        /// </summary>
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddPlaneParameter("Plane", "P", "Base plane", GH_ParamAccess.item, Plane.WorldXY);
            pManager.AddNumberParameter("Radius", "R", "Shape radius", GH_ParamAccess.item, 1);
            pManager.AddBooleanParameter("Surface", "S", "Output surfaces", GH_ParamAccess.item, false);
            pManager.HideParameter(0);
            Message = "20 Sides";
        }

        /// <summary>
        /// Registers all the output parameters for this component.
        /// </summary>
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddCurveParameter("Polyline", "P", "Output polylines", GH_ParamAccess.list);
            pManager.AddBrepParameter("Polygon", "P", "Output faces", GH_ParamAccess.list);
        }
        #region///////稀疏
        static string str1 = @"{-42.53254, 26.286556, 137.638192}
    {-42.53254, -58.778525, 85.065081}
    {42.53254, -111.351636, 85.065081}
    {42.53254, -26.286556, 137.638192}
    {42.53254, -111.351636, 85.065081}
    {95.105652, -111.351636, 0.0}
    {95.105652, -26.286556, 52.573111}
    {42.53254, -26.286556, 137.638192}
    {95.105652, -26.286556, 52.573111}
    {95.105652, 58.778525, 0.0}
    {42.53254, 58.778525, 85.065081}
    {42.53254, -26.286556, 137.638192}
    {-42.53254, 26.286556, 137.638192}
    {-42.53254, 111.351636, 85.065081}
    {42.53254, 58.778525, 85.065081}
    {42.53254, -26.286556, 137.638192}
    {42.53254, -26.286556, -137.638192}
    {42.53254, -111.351636, -85.065081}
    {-42.53254, -58.778525, -85.065081}
    {-42.53254, 26.286556, -137.638192}
    {-42.53254, -58.778525, -85.065081}
    {-95.105652, -58.778525, 0.0}
    {-95.105652, 26.286556, -52.573111}
    {-42.53254, 26.286556, -137.638192}
    {-95.105652, 26.286556, -52.573111}
    {-95.105652, 111.351636, 0.0}
    {-42.53254, 111.351636, -85.065081}
    {-42.53254, 26.286556, -137.638192}
    {42.53254, -26.286556, -137.638192}
    {42.53254, 58.778525, -85.065081}
    {-42.53254, 111.351636, -85.065081}
    {-42.53254, 26.286556, -137.638192}
    {42.53254, 58.778525, -85.065081}
    {95.105652, 58.778525, 0.0}
    {95.105652, -26.286556, -52.573111}
    {42.53254, -26.286556, -137.638192}
    {95.105652, -26.286556, 52.573111}
    {95.105652, 58.778525, 0.0}
    {95.105652, -26.286556, -52.573111}
    {95.105652, -111.351636, 0.0}
    {42.53254, -26.286556, -137.638192}
    {42.53254, -111.351636, -85.065081}
    {95.105652, -111.351636, 0.0}
    {95.105652, -26.286556, -52.573111}
    {-42.53254, 111.351636, 85.065081}
    {-95.105652, 111.351636, 0.0}
    {-95.105652, 26.286556, 52.573111}
    {-42.53254, 26.286556, 137.638192}
    {-95.105652, 26.286556, -52.573111}
    {-95.105652, 111.351636, 0.0}
    {-95.105652, 26.286556, 52.573111}
    {-95.105652, -58.778525, 0.0}
    {-42.53254, 26.286556, 137.638192}
    {-42.53254, -58.778525, 85.065081}
    {-95.105652, -58.778525, 0.0}
    {-95.105652, 26.286556, 52.573111}
    {95.105652, 58.778525, 0.0}
    {10.040571, 111.351636, 0.0}
    {-42.53254, 111.351636, 85.065081}
    {42.53254, 58.778525, 85.065081}
    {95.105652, 58.778525, 0.0}
    {10.040571, 111.351636, 0.0}
    {-42.53254, 111.351636, -85.065081}
    {42.53254, 58.778525, -85.065081}
    {-42.53254, 111.351636, -85.065081}
    {10.040571, 111.351636, 0.0}
    {-42.53254, 111.351636, 85.065081}
    {-95.105652, 111.351636, 0.0}
    {42.53254, -111.351636, 85.065081}
    {-10.040571, -111.351636, 0.0}
    {-95.105652, -58.778525, 0.0}
    {-42.53254, -58.778525, 85.065081}
    {-42.53254, -58.778525, -85.065081}
    {-95.105652, -58.778525, 0.0}
    {-10.040571, -111.351636, 0.0}
    {42.53254, -111.351636, -85.065081}
    {42.53254, -111.351636, -85.065081}
    {-10.040571, -111.351636, 0.0}
    {42.53254, -111.351636, 85.065081}
    {95.105652, -111.351636, 0.0}
    ";
        static string length1 = "44444444444444444444";
        #endregion
        #region///////普通
        static string str2 = @"{0.0, 47.404641, 124.106962}
    {-76.702321, 0.0, 124.106962}
    {0.0, -47.404641, 124.106962}
    {76.702321, 0.0, 124.106962}
    {0.0, -47.404641, 124.106962}
    {0.0, -124.106962, 76.702321}
    {76.702321, -76.702321, 76.702321}
    {76.702321, 0.0, 124.106962}
    {76.702321, -76.702321, 76.702321}
    {124.106962, -76.702321, 0.0}
    {124.106962, 0.0, 47.404641}
    {76.702321, 0.0, 124.106962}
    {124.106962, 0.0, 47.404641}
    {124.106962, 76.702321, 0.0}
    {76.702321, 76.702321, 76.702321}
    {76.702321, 0.0, 124.106962}
    {0.0, 47.404641, 124.106962}
    {0.0, 124.106962, 76.702321}
    {76.702321, 76.702321, 76.702321}
    {76.702321, 0.0, 124.106962}
    {-76.702321, 0.0, 124.106962}
    {-76.702321, 76.702321, 76.702321}
    {0.0, 124.106962, 76.702321}
    {0.0, 47.404641, 124.106962}
    {-76.702321, 76.702321, 76.702321}
    {-124.106962, 76.702321, 0.0}
    {-124.106962, 0.0, 47.404641}
    {-76.702321, 0.0, 124.106962}
    {-124.106962, 0.0, 47.404641}
    {-124.106962, -76.702321, 0.0}
    {-76.702321, -76.702321, 76.702321}
    {-76.702321, 0.0, 124.106962}
    {0.0, -47.404641, 124.106962}
    {0.0, -124.106962, 76.702321}
    {-76.702321, -76.702321, 76.702321}
    {-76.702321, 0.0, 124.106962}
    {-76.702321, -76.702321, 76.702321}
    {0.0, -124.106962, 76.702321}
    {-47.404641, -124.106962, 0.0}
    {-124.106962, -76.702321, 0.0}
    {-47.404641, -124.106962, 0.0}
    {0.0, -124.106962, -76.702321}
    {47.404641, -124.106962, 0.0}
    {0.0, -124.106962, 76.702321}
    {76.702321, -76.702321, 76.702321}
    {124.106962, -76.702321, 0.0}
    {47.404641, -124.106962, 0.0}
    {0.0, -124.106962, 76.702321}
    {47.404641, -124.106962, 0.0}
    {124.106962, -76.702321, 0.0}
    {76.702321, -76.702321, -76.702321}
    {0.0, -124.106962, -76.702321}
    {76.702321, -76.702321, -76.702321}
    {76.702321, 0.0, -124.106962}
    {124.106962, 0.0, -47.404641}
    {124.106962, -76.702321, 0.0}
    {124.106962, 0.0, 47.404641}
    {124.106962, 76.702321, 0.0}
    {124.106962, 0.0, -47.404641}
    {124.106962, -76.702321, 0.0}
    {124.106962, 0.0, -47.404641}
    {124.106962, 76.702321, 0.0}
    {76.702321, 76.702321, -76.702321}
    {76.702321, 0.0, -124.106962}
    {76.702321, 76.702321, -76.702321}
    {0.0, 124.106962, -76.702321}
    {47.404641, 124.106962, 0.0}
    {124.106962, 76.702321, 0.0}
    {76.702321, 76.702321, 76.702321}
    {0.0, 124.106962, 76.702321}
    {47.404641, 124.106962, 0.0}
    {124.106962, 76.702321, 0.0}
    {47.404641, 124.106962, 0.0}
    {0.0, 124.106962, 76.702321}
    {-47.404641, 124.106962, 0.0}
    {0.0, 124.106962, -76.702321}
    {-76.702321, 76.702321, 76.702321}
    {-124.106962, 76.702321, 0.0}
    {-47.404641, 124.106962, 0.0}
    {0.0, 124.106962, 76.702321}
    {-47.404641, 124.106962, 0.0}
    {-124.106962, 76.702321, 0.0}
    {-76.702321, 76.702321, -76.702321}
    {0.0, 124.106962, -76.702321}
    {-76.702321, 76.702321, -76.702321}
    {-76.702321, 0.0, -124.106962}
    {-124.106962, 0.0, -47.404641}
    {-124.106962, 76.702321, 0.0}
    {-124.106962, 0.0, 47.404641}
    {-124.106962, -76.702321, 0.0}
    {-124.106962, 0.0, -47.404641}
    {-124.106962, 76.702321, 0.0}
    {-124.106962, 0.0, -47.404641}
    {-124.106962, -76.702321, 0.0}
    {-76.702321, -76.702321, -76.702321}
    {-76.702321, 0.0, -124.106962}
    {-47.404641, -124.106962, 0.0}
    {0.0, -124.106962, -76.702321}
    {-76.702321, -76.702321, -76.702321}
    {-124.106962, -76.702321, 0.0}
    {-76.702321, -76.702321, -76.702321}
    {0.0, -124.106962, -76.702321}
    {0.0, -47.404641, -124.106962}
    {-76.702321, 0.0, -124.106962}
    {76.702321, -76.702321, -76.702321}
    {76.702321, 0.0, -124.106962}
    {0.0, -47.404641, -124.106962}
    {0.0, -124.106962, -76.702321}
    {0.0, -47.404641, -124.106962}
    {76.702321, 0.0, -124.106962}
    {0.0, 47.404641, -124.106962}
    {-76.702321, 0.0, -124.106962}
    {76.702321, 76.702321, -76.702321}
    {0.0, 124.106962, -76.702321}
    {0.0, 47.404641, -124.106962}
    {76.702321, 0.0, -124.106962}
    {-76.702321, 76.702321, -76.702321}
    {-76.702321, 0.0, -124.106962}
    {0.0, 47.404641, -124.106962}
    {0.0, 124.106962, -76.702321}
    ";
        static string length2 = "444444444444444444444444444444";
        #endregion
        #region///////致密
        static string str3 = @"{0.0, 52.407069, 137.203489}
    {-20.017719, 0.0, 137.203489}
    {0.0, -52.407069, 137.203489}
    {20.017719, 0.0, 137.203489}
    {0.0, -52.407069, 137.203489}
    {52.407069, -52.407069, 117.18577}
    {72.424789, 0.0, 117.18577}
    {20.017719, 0.0, 137.203489}
    {0.0, 52.407069, 137.203489}
    {52.407069, 52.407069, 117.18577}
    {72.424789, 0.0, 117.18577}
    {20.017719, 0.0, 137.203489}
    {52.407069, 52.407069, 117.18577}
    {84.796419, 84.796419, 84.796419}
    {32.38935, 84.796419, 104.814139}
    {0.0, 52.407069, 137.203489}
    {32.38935, 84.796419, 104.814139}
    {0.0, 117.18577, 72.424789}
    {-32.38935, 84.796419, 104.814139}
    {0.0, 52.407069, 137.203489}
    {-32.38935, 84.796419, 104.814139}
    {-84.796419, 84.796419, 84.796419}
    {-52.407069, 52.407069, 117.18577}
    {0.0, 52.407069, 137.203489}
    {-20.017719, 0.0, 137.203489}
    {-72.424789, 0.0, 117.18577}
    {-52.407069, 52.407069, 117.18577}
    {0.0, 52.407069, 137.203489}
    {0.0, -52.407069, 137.203489}
    {-52.407069, -52.407069, 117.18577}
    {-72.424789, 0.0, 117.18577}
    {-20.017719, 0.0, 137.203489}
    {-52.407069, -52.407069, 117.18577}
    {-84.796419, -84.796419, 84.796419}
    {-32.38935, -84.796419, 104.814139}
    {0.0, -52.407069, 137.203489}
    {-32.38935, -84.796419, 104.814139}
    {0.0, -117.18577, 72.424789}
    {32.38935, -84.796419, 104.814139}
    {0.0, -52.407069, 137.203489}
    {52.407069, -52.407069, 117.18577}
    {84.796419, -84.796419, 84.796419}
    {32.38935, -84.796419, 104.814139}
    {0.0, -52.407069, 137.203489}
    {52.407069, -52.407069, 117.18577}
    {72.424789, 0.0, 117.18577}
    {104.814139, -32.38935, 84.796419}
    {84.796419, -84.796419, 84.796419}
    {104.814139, -32.38935, 84.796419}
    {137.203489, 0.0, 52.407069}
    {104.814139, 32.38935, 84.796419}
    {72.424789, 0.0, 117.18577}
    {52.407069, 52.407069, 117.18577}
    {84.796419, 84.796419, 84.796419}
    {104.814139, 32.38935, 84.796419}
    {72.424789, 0.0, 117.18577}
    {104.814139, 32.38935, 84.796419}
    {84.796419, 84.796419, 84.796419}
    {117.18577, 52.407069, 52.407069}
    {137.203489, 0.0, 52.407069}
    {117.18577, 52.407069, 52.407069}
    {117.18577, 72.424789, 0.0}
    {84.796419, 104.814139, 32.38935}
    {84.796419, 84.796419, 84.796419}
    {84.796419, 104.814139, 32.38935}
    {52.407069, 137.203489, 0.0}
    {52.407069, 117.18577, 52.407069}
    {84.796419, 84.796419, 84.796419}
    {32.38935, 84.796419, 104.814139}
    {0.0, 117.18577, 72.424789}
    {52.407069, 117.18577, 52.407069}
    {84.796419, 84.796419, 84.796419}
    {52.407069, 117.18577, 52.407069}
    {0.0, 117.18577, 72.424789}
    {0.0, 137.203489, 20.017719}
    {52.407069, 137.203489, 0.0}
    {0.0, 137.203489, 20.017719}
    {-52.407069, 137.203489, 0.0}
    {-52.407069, 117.18577, 52.407069}
    {0.0, 117.18577, 72.424789}
    {-32.38935, 84.796419, 104.814139}
    {-84.796419, 84.796419, 84.796419}
    {-52.407069, 117.18577, 52.407069}
    {0.0, 117.18577, 72.424789}
    {-52.407069, 117.18577, 52.407069}
    {-84.796419, 84.796419, 84.796419}
    {-84.796419, 104.814139, 32.38935}
    {-52.407069, 137.203489, 0.0}
    {-84.796419, 104.814139, 32.38935}
    {-117.18577, 72.424789, 0.0}
    {-117.18577, 52.407069, 52.407069}
    {-84.796419, 84.796419, 84.796419}
    {-117.18577, 52.407069, 52.407069}
    {-137.203489, 0.0, 52.407069}
    {-104.814139, 32.38935, 84.796419}
    {-84.796419, 84.796419, 84.796419}
    {-52.407069, 52.407069, 117.18577}
    {-72.424789, 0.0, 117.18577}
    {-104.814139, 32.38935, 84.796419}
    {-84.796419, 84.796419, 84.796419}
    {-104.814139, 32.38935, 84.796419}
    {-72.424789, 0.0, 117.18577}
    {-104.814139, -32.38935, 84.796419}
    {-137.203489, 0.0, 52.407069}
    {-52.407069, -52.407069, 117.18577}
    {-84.796419, -84.796419, 84.796419}
    {-104.814139, -32.38935, 84.796419}
    {-72.424789, 0.0, 117.18577}
    {-104.814139, -32.38935, 84.796419}
    {-84.796419, -84.796419, 84.796419}
    {-117.18577, -52.407069, 52.407069}
    {-137.203489, 0.0, 52.407069}
    {-117.18577, -52.407069, 52.407069}
    {-117.18577, -72.424789, 0.0}
    {-84.796419, -104.814139, 32.38935}
    {-84.796419, -84.796419, 84.796419}
    {-84.796419, -104.814139, 32.38935}
    {-52.407069, -137.203489, 0.0}
    {-52.407069, -117.18577, 52.407069}
    {-84.796419, -84.796419, 84.796419}
    {-32.38935, -84.796419, 104.814139}
    {0.0, -117.18577, 72.424789}
    {-52.407069, -117.18577, 52.407069}
    {-84.796419, -84.796419, 84.796419}
    {-52.407069, -117.18577, 52.407069}
    {0.0, -117.18577, 72.424789}
    {0.0, -137.203489, 20.017719}
    {-52.407069, -137.203489, 0.0}
    {0.0, -137.203489, 20.017719}
    {52.407069, -137.203489, 0.0}
    {52.407069, -117.18577, 52.407069}
    {0.0, -117.18577, 72.424789}
    {32.38935, -84.796419, 104.814139}
    {84.796419, -84.796419, 84.796419}
    {52.407069, -117.18577, 52.407069}
    {0.0, -117.18577, 72.424789}
    {52.407069, -117.18577, 52.407069}
    {84.796419, -84.796419, 84.796419}
    {84.796419, -104.814139, 32.38935}
    {52.407069, -137.203489, 0.0}
    {84.796419, -104.814139, 32.38935}
    {117.18577, -72.424789, 0.0}
    {117.18577, -52.407069, 52.407069}
    {84.796419, -84.796419, 84.796419}
    {104.814139, -32.38935, 84.796419}
    {137.203489, 0.0, 52.407069}
    {117.18577, -52.407069, 52.407069}
    {84.796419, -84.796419, 84.796419}
    {117.18577, -52.407069, 52.407069}
    {137.203489, 0.0, 52.407069}
    {137.203489, -20.017719, 0.0}
    {117.18577, -72.424789, 0.0}
    {137.203489, -20.017719, 0.0}
    {137.203489, 0.0, -52.407069}
    {137.203489, 20.017719, 0.0}
    {137.203489, 0.0, 52.407069}
    {117.18577, 52.407069, 52.407069}
    {117.18577, 72.424789, 0.0}
    {137.203489, 20.017719, 0.0}
    {137.203489, 0.0, 52.407069}
    {137.203489, 20.017719, 0.0}
    {117.18577, 72.424789, 0.0}
    {117.18577, 52.407069, -52.407069}
    {137.203489, 0.0, -52.407069}
    {117.18577, 52.407069, -52.407069}
    {84.796419, 84.796419, -84.796419}
    {84.796419, 104.814139, -32.38935}
    {117.18577, 72.424789, 0.0}
    {84.796419, 104.814139, 32.38935}
    {52.407069, 137.203489, 0.0}
    {84.796419, 104.814139, -32.38935}
    {117.18577, 72.424789, 0.0}
    {84.796419, 104.814139, -32.38935}
    {52.407069, 137.203489, 0.0}
    {52.407069, 117.18577, -52.407069}
    {84.796419, 84.796419, -84.796419}
    {52.407069, 117.18577, -52.407069}
    {0.0, 117.18577, -72.424789}
    {0.0, 137.203489, -20.017719}
    {52.407069, 137.203489, 0.0}
    {0.0, 137.203489, 20.017719}
    {-52.407069, 137.203489, 0.0}
    {0.0, 137.203489, -20.017719}
    {52.407069, 137.203489, 0.0}
    {0.0, 137.203489, -20.017719}
    {-52.407069, 137.203489, 0.0}
    {-52.407069, 117.18577, -52.407069}
    {0.0, 117.18577, -72.424789}
    {-52.407069, 117.18577, -52.407069}
    {-84.796419, 84.796419, -84.796419}
    {-84.796419, 104.814139, -32.38935}
    {-52.407069, 137.203489, 0.0}
    {-117.18577, 72.424789, 0.0}
    {-84.796419, 104.814139, -32.38935}
    {-52.407069, 137.203489, 0.0}
    {-84.796419, 104.814139, 32.38935}
    {-84.796419, 104.814139, -32.38935}
    {-117.18577, 72.424789, 0.0}
    {-117.18577, 52.407069, -52.407069}
    {-84.796419, 84.796419, -84.796419}
    {-117.18577, 52.407069, -52.407069}
    {-137.203489, 0.0, -52.407069}
    {-137.203489, 20.017719, 0.0}
    {-117.18577, 72.424789, 0.0}
    {-117.18577, 52.407069, 52.407069}
    {-137.203489, 0.0, 52.407069}
    {-137.203489, 20.017719, 0.0}
    {-117.18577, 72.424789, 0.0}
    {-137.203489, 20.017719, 0.0}
    {-137.203489, 0.0, 52.407069}
    {-137.203489, -20.017719, 0.0}
    {-137.203489, 0.0, -52.407069}
    {-117.18577, -52.407069, 52.407069}
    {-117.18577, -72.424789, 0.0}
    {-137.203489, -20.017719, 0.0}
    {-137.203489, 0.0, 52.407069}
    {-137.203489, -20.017719, 0.0}
    {-117.18577, -72.424789, 0.0}
    {-117.18577, -52.407069, -52.407069}
    {-137.203489, 0.0, -52.407069}
    {-117.18577, -52.407069, -52.407069}
    {-84.796419, -84.796419, -84.796419}
    {-84.796419, -104.814139, -32.38935}
    {-117.18577, -72.424789, 0.0}
    {-84.796419, -104.814139, 32.38935}
    {-52.407069, -137.203489, 0.0}
    {-84.796419, -104.814139, -32.38935}
    {-117.18577, -72.424789, 0.0}
    {-84.796419, -104.814139, -32.38935}
    {-52.407069, -137.203489, 0.0}
    {-52.407069, -117.18577, -52.407069}
    {-84.796419, -84.796419, -84.796419}
    {-52.407069, -117.18577, -52.407069}
    {0.0, -117.18577, -72.424789}
    {0.0, -137.203489, -20.017719}
    {-52.407069, -137.203489, 0.0}
    {0.0, -137.203489, 20.017719}
    {52.407069, -137.203489, 0.0}
    {0.0, -137.203489, -20.017719}
    {-52.407069, -137.203489, 0.0}
    {0.0, -137.203489, -20.017719}
    {52.407069, -137.203489, 0.0}
    {52.407069, -117.18577, -52.407069}
    {0.0, -117.18577, -72.424789}
    {52.407069, -117.18577, -52.407069}
    {84.796419, -84.796419, -84.796419}
    {84.796419, -104.814139, -32.38935}
    {52.407069, -137.203489, 0.0}
    {117.18577, -72.424789, 0.0}
    {84.796419, -104.814139, -32.38935}
    {52.407069, -137.203489, 0.0}
    {84.796419, -104.814139, 32.38935}
    {84.796419, -104.814139, -32.38935}
    {117.18577, -72.424789, 0.0}
    {117.18577, -52.407069, -52.407069}
    {84.796419, -84.796419, -84.796419}
    {137.203489, -20.017719, 0.0}
    {137.203489, 0.0, -52.407069}
    {117.18577, -52.407069, -52.407069}
    {117.18577, -72.424789, 0.0}
    {117.18577, -52.407069, -52.407069}
    {137.203489, 0.0, -52.407069}
    {104.814139, -32.38935, -84.796419}
    {84.796419, -84.796419, -84.796419}
    {104.814139, -32.38935, -84.796419}
    {72.424789, 0.0, -117.18577}
    {104.814139, 32.38935, -84.796419}
    {137.203489, 0.0, -52.407069}
    {117.18577, 52.407069, -52.407069}
    {84.796419, 84.796419, -84.796419}
    {104.814139, 32.38935, -84.796419}
    {137.203489, 0.0, -52.407069}
    {104.814139, 32.38935, -84.796419}
    {84.796419, 84.796419, -84.796419}
    {52.407069, 52.407069, -117.18577}
    {72.424789, 0.0, -117.18577}
    {52.407069, 52.407069, -117.18577}
    {0.0, 52.407069, -137.203489}
    {32.38935, 84.796419, -104.814139}
    {84.796419, 84.796419, -84.796419}
    {52.407069, 117.18577, -52.407069}
    {0.0, 117.18577, -72.424789}
    {32.38935, 84.796419, -104.814139}
    {84.796419, 84.796419, -84.796419}
    {32.38935, 84.796419, -104.814139}
    {0.0, 117.18577, -72.424789}
    {-32.38935, 84.796419, -104.814139}
    {0.0, 52.407069, -137.203489}
    {-52.407069, 117.18577, -52.407069}
    {-84.796419, 84.796419, -84.796419}
    {-32.38935, 84.796419, -104.814139}
    {0.0, 117.18577, -72.424789}
    {-32.38935, 84.796419, -104.814139}
    {-84.796419, 84.796419, -84.796419}
    {-52.407069, 52.407069, -117.18577}
    {0.0, 52.407069, -137.203489}
    {-52.407069, 52.407069, -117.18577}
    {-72.424789, 0.0, -117.18577}
    {-104.814139, 32.38935, -84.796419}
    {-84.796419, 84.796419, -84.796419}
    {-117.18577, 52.407069, -52.407069}
    {-137.203489, 0.0, -52.407069}
    {-104.814139, 32.38935, -84.796419}
    {-84.796419, 84.796419, -84.796419}
    {-137.203489, 0.0, -52.407069}
    {-104.814139, -32.38935, -84.796419}
    {-72.424789, 0.0, -117.18577}
    {-104.814139, 32.38935, -84.796419}
    {-117.18577, -52.407069, -52.407069}
    {-84.796419, -84.796419, -84.796419}
    {-104.814139, -32.38935, -84.796419}
    {-137.203489, 0.0, -52.407069}
    {-104.814139, -32.38935, -84.796419}
    {-84.796419, -84.796419, -84.796419}
    {-52.407069, -52.407069, -117.18577}
    {-72.424789, 0.0, -117.18577}
    {-52.407069, -52.407069, -117.18577}
    {0.0, -52.407069, -137.203489}
    {-32.38935, -84.796419, -104.814139}
    {-84.796419, -84.796419, -84.796419}
    {-52.407069, -117.18577, -52.407069}
    {0.0, -117.18577, -72.424789}
    {-32.38935, -84.796419, -104.814139}
    {-84.796419, -84.796419, -84.796419}
    {-32.38935, -84.796419, -104.814139}
    {0.0, -117.18577, -72.424789}
    {32.38935, -84.796419, -104.814139}
    {0.0, -52.407069, -137.203489}
    {52.407069, -117.18577, -52.407069}
    {84.796419, -84.796419, -84.796419}
    {32.38935, -84.796419, -104.814139}
    {0.0, -117.18577, -72.424789}
    {32.38935, -84.796419, -104.814139}
    {84.796419, -84.796419, -84.796419}
    {52.407069, -52.407069, -117.18577}
    {0.0, -52.407069, -137.203489}
    {104.814139, -32.38935, -84.796419}
    {72.424789, 0.0, -117.18577}
    {52.407069, -52.407069, -117.18577}
    {84.796419, -84.796419, -84.796419}
    {52.407069, -52.407069, -117.18577}
    {72.424789, 0.0, -117.18577}
    {20.017719, 0.0, -137.203489}
    {0.0, -52.407069, -137.203489}
    {52.407069, 52.407069, -117.18577}
    {0.0, 52.407069, -137.203489}
    {20.017719, 0.0, -137.203489}
    {72.424789, 0.0, -117.18577}
    {20.017719, 0.0, -137.203489}
    {0.0, 52.407069, -137.203489}
    {-20.017719, 0.0, -137.203489}
    {0.0, -52.407069, -137.203489}
    {-52.407069, 52.407069, -117.18577}
    {-72.424789, 0.0, -117.18577}
    {-20.017719, 0.0, -137.203489}
    {0.0, 52.407069, -137.203489}
    {-52.407069, -52.407069, -117.18577}
    {0.0, -52.407069, -137.203489}
    {-20.017719, 0.0, -137.203489}
    {-72.424789, 0.0, -117.18577}
    ";
        static string length3 = "444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444";
        #endregion
        string str = str1;///////////////////////////////实际用于计算的点数据
        public string Str
        {
            get { return str; }
            set { str = value; }
        }
        string length = length1;//////////////////////////实际用于计算的组
        public string Length
        {
            get { return length; }
            set { length = value; }
        }
        private bool polygonA = true;
        private bool polygonB = false;
        private bool polygonC = false;
        public bool PolygonA/////////////////稀疏
        {
            get { return polygonA; }
            set
            {
                polygonA = value;
                if ((polygonA))
                {
                    Message = "20 Sides";
                }
            }
        }
        public bool PolygonB///////////////普通
        {
            get { return polygonB; }
            set
            {
                polygonB = value;
                if ((polygonB))
                {
                    Message = "30 Sides";
                }
            }
        }
        public bool PolygonC///////////////致密
        {
            get { return polygonC; }
            set
            {
                polygonC = value;
                if ((polygonC))
                {
                    Message = "90 Sides";
                }
            }
        }
        public override bool Read(GH_IReader reader)
        {
            PolygonA = reader.GetBoolean("PolyF1");
            PolygonB = reader.GetBoolean("PolyF2");
            PolygonC = reader.GetBoolean("PolyF3");
            if (PolygonA)
            {
                Str = str1;
                Length = length1;
            }
            if (PolygonB)
            {
                Str = str2;
                Length = length2;
            }
            if (PolygonC)
            {
                Str = str3;
                Length = length3;
            }
            return base.Read(reader);
        }
        public override bool Write(GH_IWriter writer)
        {
            writer.SetBoolean("PolyF1", PolygonA);
            writer.SetBoolean("PolyF2", PolygonB);
            writer.SetBoolean("PolyF3", PolygonC);
            return base.Write(writer);
        }
        Color cor1 = Color.FromArgb(61, 200, 44);
        Color cor2 = Color.FromArgb(61, 150, 44);
        Color cor3 = Color.FromArgb(61, 100, 44);
        protected override void AppendAdditionalComponentMenuItems(System.Windows.Forms.ToolStripDropDown menu)
        {
            // Append the item to the menu, making sure it's always enabled and checked if Absolute is True.
            ToolStripMenuItem item = Menu_AppendItem(menu, "20 Sides", Menu_AbsoluteClicked, true, PolygonA);
            ToolStripMenuItem item2 = Menu_AppendItem(menu, "30 Sides", Menu_AbsoluteClicked2, true, PolygonB);
            ToolStripMenuItem item3 = Menu_AppendItem(menu, "90 Sides", Menu_AbsoluteClicked3, true, PolygonC);
            // Specifically assign a tooltip text to the menu item.
            item.BackColor = cor1;
            item2.BackColor = cor2;
            item3.BackColor = cor3;
        }
        private void Menu_AbsoluteClicked(object sender, EventArgs e)
        {
            RecordUndoEvent("Absolute");
            PolygonA = true;
            PolygonB = false;
            PolygonC = false;
            Str = str1;
            Length = length1;
            ExpireSolution(true);
        }
        private void Menu_AbsoluteClicked2(object sender, EventArgs e)
        {
            RecordUndoEvent("Absolute");
            PolygonA = false ;
            PolygonB = true ;
            PolygonC = false;
            Str = str2;
            Length = length2;
            ExpireSolution(true);
        }
        private void Menu_AbsoluteClicked3(object sender, EventArgs e)
        {
            RecordUndoEvent("Absolute");
            PolygonA = false;
            PolygonB = false;
            PolygonC = true;
            Str = str3;
            Length = length3;
            ExpireSolution(true);
        }

        /// <summary>
        /// This is the method that actually does the work.
        /// </summary>
        /// <param name="DA">The DA object is used to retrieve from inputs and store in outputs.</param>
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            Plane plane = Plane.WorldXY;
            double radius = 0;
            bool seal = false;
            if (!DA.GetData(0, ref plane)) return;
            if (!DA.GetData(1, ref radius)) return;
            if (!DA.GetData(2, ref seal)) return;
            double xx = plane.OriginX;
            double yy = plane.OriginY;
            double zz = plane.OriginZ;
            ////////////////////////////相对平面坐标
            string[] mm = str.Split(new string[] { "{", "}" }, StringSplitOptions.RemoveEmptyEntries);
            List<string> nn = mm.ToList();
            for (int i = 0; i < nn.Count; i++)//移除空项
            {
                if (nn[i].Length < 8)
                {
                    nn.RemoveAt(i);
                    i--;
                }
            }
            List<int> count = new List<int>();
            for (int i = 0; i < length.Length; i++)//点分组列表
            {
                count.Add(Convert.ToInt32(length[i].ToString()));
            }
            ///////////////////////////////////////////////////////////////////
            double rate = radius / 146;//与默认半径的比例
            List<Point3d> pts = new List<Point3d>();
            for (int i = 0; i < nn.Count; i++)
            {
                string[] pt = nn[i].Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries);
                double ptx = Convert.ToDouble(pt[0]) * rate + xx;
                double pty = Convert.ToDouble(pt[1]) * rate + yy;
                double ptz = Convert.ToDouble(pt[2]) * rate + zz;
                Point3d point = new Point3d(ptx, pty, ptz);
                pts.Add(point);
            }
            ////////////////////////////////////////////////////////////////////获取点
            List<Polyline> ply = new List<Polyline>();
            List<Brep> bps = new List<Brep>();
            for (int i = 0; i < count.Count; i++)
            {
                List<Point3d> pts2 = new List<Point3d>();
                for (int j = 0; j < count[i]; j++)
                {
                    pts2.Add(pts[0]);
                    pts.RemoveAt(0);
                }
                pts2.Add(pts2[0]);
                Polyline pl = new Polyline(pts2);
                ply.Add(pl);
                if (seal)
                {
                    bps.Add(Brep.CreatePlanarBreps(pl.ToNurbsCurve())[0]);
                }
            }
            if (seal)
            {
                DA.SetDataList(1, bps);
            }
            DA.SetDataList(0, ply);
        }

        /// <summary>
        /// Provides an Icon for the component.
        /// </summary>
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                //You can add image files to your project resources and access them like this:
                // return Resources.IconForThisComponent;
                return Resource1.surface_多面体F;
            }
        }

        /// <summary>
        /// Gets the unique ID for this component. Do not change this ID after release.
        /// </summary>
        public override Guid ComponentGuid
        {
            get { return new Guid("{5d345d54-ce44-4765-8003-8fd9a2b5ae53}"); }
        }
    }
}